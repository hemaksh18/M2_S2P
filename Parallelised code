#include <chrono>
#include <iostream>
#include <thread>
#include <vector>
#include <time.h>

using namespace std::chrono;

void randomVector(std::vector<int>& vector, int size) {
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }
}

void addVectors(int* v1, int* v2, int* v3, int start, int end) {
    for (int i = start; i < end; i++) {
        v3[i] = v1[i] + v2[i];
    }
}

int main() {
    // Define the size of the vectors
    unsigned long size = 100000000;
    // Seed the random number generator
    srand(time(0));

    // vectors created
    std::vector<int> v1(size);
    std::vector<int> v2(size);
    std::vector<int> v3(size);

    // Fill vectors with random values
    randomVector(v1, size);
    randomVector(v2, size);

    // number of threads used
    int num_threads = 6;
    // a separate vector to store the threads
    std::vector<std::thread> threads(num_threads);

    auto start = high_resolution_clock::now();

    // Calculate the chunk size for each thread
    int chunk_size = size / num_threads;

    // assigning threads to divide the task
    for (int i = 0; i < num_threads; ++i) {
        int start_index = i * chunk_size;
        int end_index = (i == num_threads - 1) ? size : (i + 1) * chunk_size;
        // Each thread will handle a part of the vectors
        threads[i] = std::thread(addVectors, v1.data(), v2.data(), v3.data(), start_index, end_index);
    }

    // joining all the threads after they individually completed their task
    for (int i = 0; i < num_threads; ++i) {
        threads[i].join();
    }

    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);

    // Output the time 
    std::cout << "Time taken by function: " << duration.count() << " microseconds" << std::endl;

    return 0;
}
